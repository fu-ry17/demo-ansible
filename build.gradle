buildscript {
    ext.kotlin_version = '1.9.23'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.sonarqube" version "4.3.0.3225"
    id "jacoco"
    id("io.sentry.jvm.gradle") version "4.2.0"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply from: './bumpVersion.gradle'

group = 'com.turnkey.turnquest.gis.quotations'
version = properties["appVersionName"]
description = """TurnQuest General Insurance System - Quotation Service"""

java {
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.0")
}


dependencies {
    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.cloud:spring-cloud-starter-config')
    implementation('org.springframework.cloud:spring-cloud-starter-openfeign')
    implementation('org.springframework.boot:spring-boot-starter')
    implementation('io.micrometer:micrometer-tracing-bridge-brave')
    implementation('org.apache.commons:commons-lang3:3.12.0')
    implementation('org.modelmapper:modelmapper:3.1.0')

    runtimeOnly('com.mysql:mysql-connector-j')
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    /*Rest Assured*/
    // Rest Assured for testing
    testImplementation 'io.rest-assured:rest-assured:5.5.0'

    // TestNG for testing
    testImplementation 'org.testng:testng:7.10.2'

    // JSON Simple for JSON processing
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // Rest Assured JSON Schema Validator
    implementation 'io.rest-assured:json-schema-validator:5.5.0'

    //swagger
    implementation('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0')

    /*kafka*/
    implementation('org.springframework.kafka:spring-kafka')

    //ThymeLeaf
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")

    //itextPdf
    implementation('com.itextpdf:html2pdf:4.0.3')

    //AKI
    implementation('com.googlecode.json-simple:json-simple:1.1.1')

    /*security*/
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.security:spring-security-oauth2-jose')
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
    implementation('org.springframework.boot:spring-boot-starter-oauth2-resource-server')
    implementation('org.springframework.boot:spring-boot-starter-oauth2-authorization-server')

    /*Discovery*/
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    implementation('org.springframework.cloud:spring-cloud-starter-kubernetes-client-all')
    implementation 'commons-fileupload:commons-fileupload:1.5'

    implementation("com.google.code.gson:gson:2.9.0")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    compileOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
    reports{
        junitXml.destination(file("$buildDir/reports/junit"))
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }

    // Add JVM argument to enable dynamic agent loading
    jvmArgs "-XX:+EnableDynamicAgentLoading"
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sonar {
    properties {
        properties["sonar.projectKey"] += "agencify-quotation"
        properties["sonar.jdbc.dialect"] += "mysql"
        properties["sonar.language"] += "java"
        properties["sonar.binaries"] += file("${buildDir}/classes")
        properties["sonar.dynamicAnalysis"] += "reuseReports"
        properties["sonar.exclusions"] = "**/dto/**,**/model/**,**enums**,**/payload/**"
        properties["sonar.junit.reportsPath"] += file("$buildDir/reports/junit/*")
        properties["sonar.core.codeCoveragePlugin"] += "jacoco"
        properties["sonar.coverage.jacoco.xmlReportPaths"] += "${buildDir}/reports/jacoco/test/jacoco.xml"
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required  = false
        html.destination file("${buildDir}/reports/jacoco/html")
        xml.destination file("${buildDir}/reports/jacoco/test/jacoco.xml")
    }
}

jacoco {
    toolVersion = "0.8.9"
}
kotlin {
    jvmToolchain(21)
}

